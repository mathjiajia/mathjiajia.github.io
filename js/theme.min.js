(()=>{var ee=(e,o)=>()=>(o||e((o={exports:{}}).exports,o),o.exports);var W=ee((ve,U)=>{U.exports=window.Tablesort});var te=W();function oe(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;")}function X(e,o){e=e||[];for(let t=0;t<e.length;t++)o(e[t])}function Y(){return document.documentElement&&document.documentElement.scrollTop||document.body.scrollTop}function ne(){let e=document.getElementById("menu-toggle-mobile"),o=document.getElementById("menu-mobile");window.menuToggleMobileEventListener||(e.addEventListener("click",()=>{document.body.classList.toggle("blur"),e.classList.toggle("active"),o.classList.toggle("active")}),window.menuToggleMobileEventListener=!0),window._menuMobileOnClickMask=()=>{e.classList.remove("active"),o.classList.remove("active")},window.clickMaskEventSet.add(window._menuMobileOnClickMask)}function H(e){window.setTheme(e),window.saveTheme(e)}function ie(){Array.from(document.getElementsByClassName("theme-switch")).forEach(e=>{e.addEventListener("click",()=>{let o=document.body.getAttribute("theme");H(o==="dark"?"light":"dark");for(let t of window.switchThemeEventSet)t()})})}function se(){Array.from(document.getElementsByClassName("color-theme-select")).forEach(e=>{let o=document.body.getAttribute("theme");for(let t=0;t<e.options.length;t++)if(e.options[t].value===o){e.selectedIndex=t;break}e.addEventListener("change",()=>{let t=e.value;window.localStorage&&localStorage.setItem("theme",t),t!=="auto"?H(t):window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?H("dark"):H("light");for(let i of window.switchThemeEventSet)i()})})}function Z(){let e=window.config.search,o=window.matchMedia&&window.matchMedia("only screen and (max-width: 680px)").matches;if(!e||o&&window._searchMobileOnce||!o&&window._searchDesktopOnce)return;let t=e.maxResultLength?e.maxResultLength:10,i=e.snippetLength?e.snippetLength:50,n=e.highlightTag?e.highlightTag:"em",s=e.isCaseSensitive?e.isCaseSensitive:!1,d=e.minMatchCharLength?e.minMatchCharLength:1,w=e.findAllMatches?e.findAllMatches:!1,g=e.location?e.location:0,_=e.threshold?e.threshold:.3,A=e.distance?e.distance:100,v=e.ignoreLocation?e.ignoreLocation:!1,D=e.useExtendedSearch?e.useExtendedSearch:!1,q=e.ignoreFieldNorm?e.ignoreFieldNorm:!1,L=e.termFrequency?e.termFrequency:1,O=e.pageLength?e.pageLength:.75,a=e.termSimilarity?e.termSimilarity:1,F=e.termSaturation?e.termSaturation:1.4,E=o?"mobile":"desktop",$=document.getElementById(`header-${E}`),k=document.getElementById(`search-input-${E}`),R=document.getElementById(`search-toggle-${E}`),B=document.getElementById(`search-loading-${E}`),f=document.getElementById(`search-clear-${E}`),V=window.config["autocomplete.min.js"],P=window.config["algoliasearch.min.js"],Q=window.config["pagefind.js"],G=window.config["fuse.min.js"];o?(window._searchMobileOnce=!0,k.addEventListener("focus",()=>{C("autocomplete-script",V,()=>{J(),k.focus()}),window.config?.search?.type==="algolia"?C("algolia-script",P,null):window.config?.search?.type==="fuse"?C("fuse-script",G,null):N(),document.body.classList.add("blur"),$.classList.add("open"),k.focus()}),document.getElementById("search-cancel-mobile").addEventListener("click",()=>{$.classList.remove("open"),document.body.classList.remove("blur"),document.getElementById("menu-toggle-mobile").classList.remove("active"),document.getElementById("menu-mobile").classList.remove("active"),B.style.display="none",f.style.display="none",window._searchMobile&&window._searchMobile.autocomplete.setVal("")}),f.addEventListener("click",()=>{f.style.display="none",window._searchMobile&&window._searchMobile.autocomplete.setVal("")},!1),window._searchMobileOnClickMask=()=>{$.classList.remove("open"),B.style.display="none",f.style.display="none",window._searchMobile&&window._searchMobile.autocomplete.setVal("")},window.clickMaskEventSet.add(window._searchMobileOnClickMask)):(window._searchDesktopOnce=!0,R.addEventListener("click",()=>{C("autocomplete-script",V,()=>{J(),k.focus()}),window.config?.search?.type==="algolia"?C("algolia-script",P,null):window.config?.search?.type==="fuse"?C("fuse-script",G,null):N(),document.body.classList.add("blur"),$.classList.add("open"),k.focus()}),f.addEventListener("click",()=>{f.style.display="none",window._searchDesktop&&window._searchDesktop.autocomplete.setVal("")}),document.addEventListener("keydown",p=>{p.ctrlKey&&p.code==="KeyK"&&(p.preventDefault(),R.click())}),window._searchDesktopOnClickMask=()=>{$.classList.remove("open"),B.style.display="none",f.style.display="none",window._searchDesktop&&window._searchDesktop.autocomplete.setVal("")},window.clickMaskEventSet.add(window._searchDesktopOnClickMask)),k.addEventListener("input",()=>{k.value===""?f.style.display="none":f.style.display="inline"});let J=()=>{let p=autocomplete(`#search-input-${E}`,{hint:!1,autoselect:!0,dropdownMenuContainer:`#search-dropdown-${E}`,clearOnSelected:!1,cssClasses:{noPrefix:!0},debug:!0},{name:"search",source:(m,S)=>{B.style.display="inline",f.style.display="none";let u=l=>{B.style.display="none",f.style.display="inline",S(l)};if(e.type==="algolia")window._algoliaIndex=window._algoliaIndex||algoliasearch(e.algoliaAppID,e.algoliaSearchKey).initIndex(e.algoliaIndex),window._algoliaIndex.search(m,{offset:0,length:t*8,attributesToHighlight:["title"],attributesToRetrieve:["*"],attributesToSnippet:[`content:${i}`],highlightPreTag:`<${n}>`,highlightPostTag:`</${n}>`}).then(({hits:l})=>{let c={};l.forEach(({uri:r,date:I,_highlightResult:{title:y},_snippetResult:{content:x}})=>{c[r]&&c[r].context.length>x.value||(c[r]={uri:r,title:y.value,date:I,context:x.value})}),u(Object.values(c).slice(0,t))}).catch(l=>{console.error(l),u([])});else if(e.type==="fuse"){let l=()=>{let c={};return window._fuseIndex.search(m).forEach(({item:r,refIndex:I,matches:y})=>{let x=r.title,M=r.content;y.forEach(({indices:T,value:ye,key:K})=>{if(K==="content"){let b=0;for(let h=0;h<T.length;h++){let j=M.substring(T[h][0]+b,T[h][1]+1+b),z=`<${n}>`+j+`</${n}>`;M=M.substring(0,T[h][0]+b)+z+M.substring(T[h][1]+1+b,M.length),b+=n.length*2+5}}else if(K==="title"){let b=0;for(let h=0;h<T.length;h++){let j=x.substring(T[h][0]+b,T[h][1]+1+b),z=`<${n}>`+j+`</${n}>`;x=x.substring(0,T[h][0]+b)+z+x.substring(T[h][1]+1+b,M.length),b+=n.length*2+5}}}),c[r.uri]={uri:r.uri,title:x,date:r.date,context:M}}),console.log(c),Object.values(c).slice(0,t)};window._fuseIndex?u(l()):fetch(e.fuseIndexURL).then(c=>c.json()).then(c=>{let r={isCaseSensitive:s,findAllMatches:w,minMatchCharLength:d,location:g,threshold:_,distance:A,ignoreLocation:v,useExtendedSearch:D,ignoreFieldNorm:q,includeScore:!1,shouldSort:!0,includeMatches:!0,keys:["content","title"]};window._fuseIndex=new Fuse(c,r),u(l())}).catch(c=>{console.error(c),u([])})}else window._pgfIndex===void 0&&N(),window._pgfIndex.debouncedSearch(m,300).then(l=>{if(l===null||!("results"in l)){u([]);return}Promise.all(l.results.slice(0,t).map(c=>c.data())).then(c=>{let r={};for(let I of c)for(let y of I.sub_results)y.url===void 0||!("anchor"in y)||y.anchor.element!="h2"||(r[y.url]={uri:y.url,title:I.meta.title,date:I.meta.date,context:n==="mark"?y.excerpt:y.excerpt.replace(/<mark>(.*?)<\/mark>/gi,`<${n}>$1</${n}>`)});u(Object.values(r))})})},templates:{suggestion:({title:m,uri:S,date:u,context:l})=>`<div><a href=${S}><span class="suggestion-title">${m}</span></a><span class="suggestion-date">${u}</span></div><div class="suggestion-context">${l}</div>`,empty:({query:m})=>`<div class="search-empty">${e.noResultsFound}: <span class="search-query">"${oe(m)}"</span></div>`,footer:()=>{let{searchType:m,icon:S,href:u}=e.type==="algolia"?{searchType:"algolia",icon:'<svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M229.3 182.6c-49.3 0-89.2 39.9-89.2 89.2 0 49.3 39.9 89.2 89.2 89.2s89.2-39.9 89.2-89.2c0-49.3-40-89.2-89.2-89.2zm62.7 56.6l-58.9 30.6c-1.8.9-3.8-.4-3.8-2.3V201c0-1.5 1.3-2.7 2.7-2.6 26.2 1 48.9 15.7 61.1 37.1.7 1.3.2 3-1.1 3.7zM389.1 32H58.9C26.4 32 0 58.4 0 90.9V421c0 32.6 26.4 59 58.9 59H389c32.6 0 58.9-26.4 58.9-58.9V90.9C448 58.4 421.6 32 389.1 32zm-202.6 84.7c0-10.8 8.7-19.5 19.5-19.5h45.3c10.8 0 19.5 8.7 19.5 19.5v15.4c0 1.8-1.7 3-3.3 2.5-12.3-3.4-25.1-5.1-38.1-5.1-13.5 0-26.7 1.8-39.4 5.5-1.7.5-3.4-.8-3.4-2.5v-15.8zm-84.4 37l9.2-9.2c7.6-7.6 19.9-7.6 27.5 0l7.7 7.7c1.1 1.1 1 3-.3 4-6.2 4.5-12.1 9.4-17.6 14.9-5.4 5.4-10.4 11.3-14.8 17.4-1 1.3-2.9 1.5-4 .3l-7.7-7.7c-7.6-7.5-7.6-19.8 0-27.4zm127.2 244.8c-70 0-126.6-56.7-126.6-126.6s56.7-126.6 126.6-126.6c70 0 126.6 56.6 126.6 126.6 0 69.8-56.7 126.6-126.6 126.6z"/></svg>',href:"https://www.algolia.com/"}:e.type==="fuse"?{searchType:"Fuse.js",icon:"",href:"https://fusejs.io/"}:{searchType:"pagefind",icon:"",href:"https://pagefind.app"};return`<div class="search-footer">Search by <a href="${u}" rel="noopener noreffer" target="_blank">${S} ${m}</a></div>`}}});p.on("autocomplete:selected",(m,S,u,l)=>{m.preventDefault()}),o?window._searchMobile=p:window._searchDesktop=p};function C(p,m,S){if(document.querySelector(`#${p}`)===null){let u=document.querySelector("head"),l=document.createElement("script");l.setAttribute("src",m),l.setAttribute("id",p),l.onload=S,u.appendChild(l)}}function N(){import(Q).then(p=>{window._pgfIndex=p,window._pgfIndex.options({excerptLength:i,termFrequency:L,pageLength:O,termSimilarity:a,termSaturation:F}).then(()=>{window._pgfIndex.init()})})}}function le(){document.querySelectorAll(".details").forEach(e=>{let o=e.getElementsByClassName("details-summary")[0],t=o.nextElementSibling;e.classList.contains("open")&&(t.style.maxHeight=t.scrollHeight+"px"),o.addEventListener("click",()=>{e.classList.contains("open")?t.style.maxHeight="0px":t.style.maxHeight=t.scrollHeight+"px",e.classList.toggle("open")},!1),addEventListener("beforeprint",()=>{e.classList.contains("open")||o.click()})})}function ce(){window.config.lightGallery&&lightGallery(document.getElementById("content"),window.config.lightGallery)}function ae(){window.config?.table?.sort&&document.querySelectorAll(".content table").forEach(e=>new te(e))}function re(){let e=document.getElementById("TableOfContents");if(e===null)return;let o=window.matchMedia&&window.matchMedia("only screen and (max-width: 1000px)").matches;if(document.getElementById("toc-static").getAttribute("kept")||o)window._tocOnScroll&&window.scrollEventSet.delete(window._tocOnScroll);else{let t=document.getElementById("toc-auto"),i=e.querySelectorAll("a:first-child"),n=e.getElementsByTagName("li"),s=document.getElementsByClassName("headerLink"),d=document.body.getAttribute("header-desktop")!=="normal",w=document.getElementById("header-desktop").offsetHeight,g=20+(d?w:0),_=t.offsetTop,A=_-g+(d?0:w);window._tocOnScroll=window._tocOnScroll||(()=>{let D=document.getElementById("post-footer").offsetTop-t.getBoundingClientRect().height,q=D-g+(d?0:w);if(window.newScrollTop<A?(t.style.position="absolute",t.style.top=`${_}px`):window.newScrollTop>q?(t.style.position="absolute",t.style.top=`${D}px`):(t.style.position="fixed",t.style.top=`${g}px`),i.length===0)return;let L=-1,O=g+window.newScrollTop;if(s.length>0)if(s[s.length-1].offsetTop<O)L=s.length-1;else for(let a=0;a<s.length-1;a++){let F=s[a].offsetTop,E=s[a+1].offsetTop;if(F<=O&&E>O){L=a;break}}if(Array.from(i).forEach(a=>a.classList.remove("active")),Array.from(n).forEach(a=>a.classList.remove("has-active")),L>=0&&L<i.length){i[L].classList.add("active");let a=i[L].parentElement;for(;a!==e;)a.classList.add("has-active"),a=a.parentElement.parentElement}}),window._tocOnScroll(),window.scrollEventSet.add(window._tocOnScroll)}}function de(){window.config.mapbox&&(mapboxgl.accessToken=window.config.mapbox.accessToken,mapboxgl.setRTLTextPlugin(window.config.mapbox.RTLTextPlugin),window._mapboxArr=window._mapboxArr||[],X(document.getElementsByClassName("mapbox"),e=>{let{lng:o,lat:t,zoom:i,lightStyle:n,darkStyle:s,marked:d,navigation:w,geolocate:g,scale:_,fullscreen:A}=window.config.data[e.id],v=new mapboxgl.Map({container:e,center:[o,t],zoom:i,minZoom:.2,style:window.isDark?s:n,attributionControl:!1});d&&new mapboxgl.Marker().setLngLat([o,t]).addTo(v),w&&v.addControl(new mapboxgl.NavigationControl,"bottom-right"),g&&v.addControl(new mapboxgl.GeolocateControl({positionOptions:{enableHighAccuracy:!0},showUserLocation:!0,trackUserLocation:!0}),"bottom-right"),_&&v.addControl(new mapboxgl.ScaleControl),A&&v.addControl(new mapboxgl.FullscreenControl),v.addControl(new MapboxLanguage),window._mapboxArr.push(v)}),window._mapboxOnSwitchTheme=()=>{X(window._mapboxArr,e=>{let o=e.getContainer(),{lightStyle:t,darkStyle:i}=window.config.data[o.id];e.setStyle(window.isDark?i:t),e.addControl(new MapboxLanguage)})},window.switchThemeEventSet.add(window._mapboxOnSwitchTheme))}function ue(){if(window.config.typeit){let e=window.config.typeit,o=e.speed?e.speed:100,t=e.cursorSpeed?e.cursorSpeed:1e3,i=e.cursorChar?e.cursorChar:"|";Object.values(e.data).forEach(n=>{let s=d=>{let w=n[d];if(!document.getElementById(w).hasAttribute("data-typeit-id")){let g=new TypeIt(`#${w}`,{strings:window.config.data[w],speed:o,lifeLike:!0,cursorSpeed:t,cursorChar:i,waitUntilVisible:!0,afterComplete:()=>{if(d===n.length-1){e.duration>=0&&window.setTimeout(()=>{g.destroy()},e.duration);return}g.destroy(),s(d+1)}}).go()}};s(0)})}}function we(){function e(i){let n=document.getElementsByTagName("meta");for(let s=0;s<n.length;s++)if(n[s].getAttribute("name")===i)return n[s]}let o=e("theme-color"),t={light:"#f8f8f8",dark:"#161b22"};window._metaThemeColorOnSwitchTheme=()=>{o.content=t[document.body.getAttribute("theme")]},window.switchThemeEventSet.add(window._metaThemeColorOnSwitchTheme),window._metaThemeColorOnSwitchTheme()}function me(){let e=document.getElementById("back-to-top-button");function o(){window.newScrollTop=Y(),window.newScrollTop>20?e.style.opacity="1":e.style.opacity="0";for(let t of window.scrollEventSet)t();window.oldScrollTop=window.newScrollTop}window.addEventListener("scroll",o,!1)}function he(){window.addEventListener("resize",()=>{window._resizeTimeout||(window._resizeTimeout=window.setTimeout(()=>{window._resizeTimeout=null;for(let e of window.resizeEventSet)e();Z()},100))},!1)}function ge(){document.getElementById("mask").addEventListener("click",()=>{for(let e of window.clickMaskEventSet)e();document.body.classList.remove("blur")},!1)}function pe(){document.querySelectorAll(".code-block").forEach(e=>{let o=e.querySelector("div.code-block-title-bar"),t=e.querySelector("code.chroma"),i=e.querySelector("button.copy-code-button"),n=i.querySelector("span.copy-icon"),s=i.querySelector("span.check-icon"),d=e.querySelector("button.wrap-code-button"),w=e.querySelector("button.line-number-button");t.style.maxHeight=t.scrollHeight+10+"px",o.addEventListener("click",()=>{e.classList.toggle("is-open"),e.classList.toggle("is-closed")}),i?.addEventListener("click",()=>{navigator.clipboard.writeText(t.textContent),n.style.display="none",s.style.display="block",setTimeout(()=>{n.style.display="block",s.style.display="none"},3e3)}),d?.addEventListener("click",()=>{t.style.maxHeight="fit-content",e.classList.toggle("is-wrap"),t.style.maxHeight=t.scrollHeight+10+"px"}),w.addEventListener("click",()=>{e.classList.toggle("show-line-numbers")}),addEventListener("beforeprint",g=>{e.classList.contains("is-closed")&&o.click(),e.classList.contains("is-wrap")||d.click()})})}function fe(){window.isDark=document.body.getAttribute("theme")!=="light",window.newScrollTop=Y(),window.oldScrollTop=window.newScrollTop,window.scrollEventSet=new Set,window.resizeEventSet=new Set,window.clickMaskEventSet=new Set,window.objectFitImages&&objectFitImages(),ne(),ie(),se(),we(),Z(),pe(),le(),ce(),ae(),ue(),de(),re(),me(),he(),ge()}fe();})();
//# sourceMappingURL=data:application/json;base64,
